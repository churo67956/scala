* Scala
In a *restricted sense*, functional programming means programming
without mutable variables,assigments,loops and other imperative
control structures.

In a *wider sense*, FP means focusing on the functions to construct
elegant programms.

Functions can be values that are produced, consumed and composed.

In particular, functions in FP languages are first-class citizens.
** Some functional programming languages
In the wide sense :
1) Haskell
2) Scala

** Call by Name and call by value 

There are 2 evaluation strategies : 

1. Call by value has the advantage that it evaluates every
function argument only once.

2. Call by name has the advantage that a function argument
is not evaluated if the correspondient parameter is unused
in the evaluation of the function body.

If CBV evaluation of an expression e terminates, then CBN
evaluation of e terminates,too.

The other direction is not true.

By default Scala use call by value.But if a type of
parameters starts with => it uses call by name strategy.

** Block and visibility.
 
A block is defined by braces { .... }
1. It contains a sequence of definitions or expressions.
2. The last element of the bock is an expression that defines its value
3. A block may appear everywhere an expression can.

val x = 0
def f(y: Int) = y + 1
var result = {
 val x = f(3)
 x*x
}+x

The definitions inside a block are only visible from within the block.
The definitions inside a block shadow definitions of th same name outside
the block.

** Lexical Scoping

Definitions of outer blocks are visible inside a block unless they are
shadowed.So we can simple eliminate reduntant occurrences of parameters.
For example in our square root program, the x parameter never change
inside the block definitions so we can delete all the duplicate occurrences 
because of lexical scoping   

** Semicolon

If  there are more than one statements on a line they need be separated by semicolons.

** Multiple line expression

There are two ways of writting multiple line expression :
1. Put the expression between parenthesis.
2. Write an operator on the first line

(SomeExpression 
+ SomeOtherExpression)

SomeExpression +
SomeOtherExpression

* Books
Structure and interpretation of computer programs. Harold.
